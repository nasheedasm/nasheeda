<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Laravel\Passport\HasApiTokens;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Hash;
use League\OAuth2\Server\Exception\OAuthServerException;
use League\OAuth2;
use Response;
use App\Error;

class User extends Authenticatable
{
use HasApiTokens,Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
protected $table='users';
    protected $fillable = [
        'name', 'email', 'password','language','timezone','role_id','office_id','tanent_id','status'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];


    public static function invalidCredentials()
    {
        dd('123');
        return new static('The user credentials.', 6, 'invalid_cred', 401);
    }



    public function validateForPassportPasswordGrant($password)
    {
        //check for password
        if (Hash::check($password, $this->getAuthPassword())) {
            //is user active?
            if ($this->status == 1) {
                return true;
            }
            else{

                $status=array(

                    '0' => [

                        'message' => 'user is freezed'
                    ],
                    '2' => [

                        'message' => 'message2'
                    ],

                );

                if (array_key_exists($this->status, $status)) {

                    $message=$status[$this->status]['message'];

                    throw Error::invalidCredentials1($message);

                }

            }
        }
    }


    public function findForPassport($username) {

        return $this->orWhere('username', $username)->first();

    }

}

